from contextlib import suppress

from aiogram.filters import Command
from aiogram import Router, types, html, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

import utils.db_api.db_quick_commands as dbqc
from utils.filters.chat_type import ChatTypeFilter
import utils.keyboards as kb
from utils.state import UserState
from utils.db_api.schemas import User, Chat
import middlewares as mdlw

from data.config import logger

from bot import bot


router_gender = Router()
router_gender.message(ChatTypeFilter(chat_type=["private"]))
router_gender.callback_query.middleware(mdlw.ChatHistoryCallbackQueryMiddleware())
router_gender.message.middleware(mdlw.ChatHistoryMessageMiddleware())


def get_gender_text(user: User):
    if user.gender:
        return (f"–í–∞—à —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–æ–ª: {html.code(user.gender)}")
    return (
        "–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –ø–æ–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    )


def gender_keyboard_select(gender: str):
    """
    Returns the keyboard variation depending on whether the gender is filled in
    or not.
    """
    return kb.get_kb_gender_full() if gender else kb.get_kb_gender_short()


def gender_decoder(gender: str):
    if gender == "male":
        return "üôéüèº‚Äç‚ôÇÔ∏è"
    if gender == "female":
        return "üôçüèº‚Äç‚ôÄÔ∏è"
    if gender == "üôéüèº‚Äç‚ôÇÔ∏è":
        return "male"
    if gender == "üôçüèº‚Äç‚ôÄÔ∏è":
        return "female"


@router_gender.callback_query(
    kb.ProfileCallBack.filter(F.button == "gender")
)
async def edit_gender_callback(callbackquery: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.gender)
    message: types.Message = callbackquery.message
    user: User = await dbqc.select_user(callbackquery.from_user.id)

    with suppress(TelegramBadRequest):
        await message.edit_text(
            text=get_gender_text(user),
            reply_markup=gender_keyboard_select(user.gender)
        )


@router_gender.message(Command("gender"))
async def edit_gender_command(
    message: types.Message,
    state: FSMContext
):
    await state.set_state(UserState.gender)

    user: User = await dbqc.select_user(message.from_user.id)

    await message.answer(
            text=get_gender_text(user),
            reply_markup=gender_keyboard_select(user.age)
        )


@router_gender.callback_query(
    kb.GenderCallBack.filter(F.button.in_({"male", "female"}))
)
async def choose_gender_value(
    callbackquery: types.CallbackQuery,
    state: FSMContext
):
    user: User = await dbqc.get_last_bot_message(callbackquery.from_user.id)
    chat: Chat = list(user.chat)[0]

    try:
        gender = await dbqc.insert_gender(callbackquery)
        await callbackquery.answer(
            text=f"–ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {gender_decoder(gender)}"
        )
    except Exception as e:
        await callbackquery.answer(
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÇÔ∏è"
            )
        logger.error(
            "An unexpected error has occurred in the handlers/gender.py "
            f"choose_gender_value while trying insert_gender:\n{e}"
        )
    finally:
        await edit_gender_callback(callbackquery, state)


@router_gender.message(UserState.gender, F.content_type.in_({'text'}))
async def entering_gender_value(
    message: types.Message,
    state: FSMContext
):
    user: User = await dbqc.get_last_bot_message(message.from_user.id)
    chat: Chat = list(user.chat)[0]

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞:"

    with suppress(TelegramBadRequest):
        await bot.edit_message_text(
            text=text,
            chat_id=message.from_user.id,
            message_id=chat.message_id,
            reply_markup=gender_keyboard_select(user.age)
        )


@router_gender.callback_query(
    kb.GenderCallBack.filter(F.button == "reset_gender")
)
async def reset_gender_callback(
    callbackquery: types.CallbackQuery, state: FSMContext
):
    user: types.User = callbackquery.from_user

    if await dbqc.delete_gender(user):
        await edit_gender_callback(callbackquery, state)
        await callbackquery.answer(
                text="–î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª–æ–≤–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
            )
