from contextlib import suppress
from typing import List, Set

from aiogram.filters import Command
from aiogram import Router, types, html, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

import utils.db_api.db_quick_commands as dbqc
from utils.filters.chat_type import ChatTypeFilter
import utils.keyboards as kb
from utils.state import UserState
from utils.db_api.schemas import User, Chat
import middlewares as mdlw

from data.config import logger

from bot import bot


router_preferences = Router()
router_preferences.message(ChatTypeFilter(chat_type=["private"]))
router_preferences.callback_query.middleware(mdlw.ChatHistoryCallbackQueryMiddleware())
router_preferences.message.middleware(mdlw.ChatHistoryMessageMiddleware())


def get_preference_text(user: User):
    if user.preferences:
        return (f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: {html.code(user.preferences)}")
    return (
        "–î–∞–Ω–Ω—ã–µ –æ –≤–∞—à–∏—Ö –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É:"
    )


@router_preferences.callback_query(
    kb.ProfileCallBack.filter(F.button == "preferences")
)
async def edit_preferences_callback(callbackquery: types.CallbackQuery, state: FSMContext):
    await state.set_state(UserState.preferences)
    message: types.Message = callbackquery.message
    user: User = await dbqc.select_user(callbackquery.from_user.id)

    with suppress(TelegramBadRequest):
        await message.edit_text(
            text=get_preference_text(user),
            reply_markup=kb.get_kb_preferences()
        )


@router_preferences.message(Command("preferences"))
async def edit_preference_command(
    message: types.Message,
    state: FSMContext
):
    await state.set_state(UserState.preferences)

    user: User = await dbqc.select_user(message.from_user.id)

    await message.answer(
            text=get_preference_text(user),
            reply_markup=kb.get_kb_preferences()
        )


def union_preferences():
    """Converting a list of lists into a single set for a magic filter."""
    _list = []

    for i in kb.PREFERENCES_CHOICES:
        _list.extend(iter(i))

    return set(_list)


async def get_set_preferences(user_id: int):
    preferences = await dbqc.get_preferences(user_id)

    if preferences is None:
        preferences: Set = set()
        length = 0
    else:
        preferences: Set = set(preferences.split(","))
        length = len(preferences)
    logger.debug(f"length, preferences: {length}, {preferences}")
    return length, preferences

@router_preferences.callback_query(
    kb.PreferencesCallBack.filter(F.button.in_(union_preferences()))
)
async def choose_preferences_value(
    callbackquery: types.CallbackQuery,
    state: FSMContext
):
    try:
        user_id = callbackquery.from_user.id
        length, preferences = await get_set_preferences(user_id)
        pending_value: str = (callbackquery.data).split(":")[1]
        if pending_value not in preferences:
            preferences.add(pending_value)
            preferences = ",".join(preferences)
            await dbqc.insert_preference(preferences, user_id)
            await callbackquery.answer(
                text=f"{pending_value} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫."
            )

        elif length > 1:
            preferences.remove(pending_value)
            preferences = ",".join(preferences)
            await dbqc.delete_preference(preferences, user_id)
            await callbackquery.answer(
                text=f"{pending_value} —É–±—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π."
            )
        else:
            await dbqc.clear_preferences(user_id)
            await callbackquery.answer(
                text=(
                    f"{pending_value} —É–±—Ä–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π.\n"
                    "–°–ø–∏—Å–æ–∫ —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç"
                )
            )

    except Exception as e:
        await callbackquery.answer(
                text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑‚Äç‚ôÇÔ∏è"
            )
        logger.error(
            "An unexpected error has occurred in the handlers/preferences.py "
            f"`choose_preferences_value` previously unhandled error:\n{e}"
        )
    finally:
        await edit_preferences_callback(callbackquery, state)


@router_preferences.message(UserState.preferences, F.content_type.in_({'text'}))
async def entering_preference_value(
    message: types.Message,
    state: FSMContext
):
    user: User = await dbqc.get_last_bot_message(message.from_user.id)
    chat: Chat = list(user.chat)[0]

    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –≤–º–µ—Å—Ç–æ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞:"

    with suppress(TelegramBadRequest):
        await bot.edit_message_text(
            text=text,
            chat_id=message.from_user.id,
            message_id=chat.message_id,
            reply_markup=kb.get_kb_preferences()
        )
